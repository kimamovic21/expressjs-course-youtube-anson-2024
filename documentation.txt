Express JS Full Course


Intro & Setup

-open terminal and type command npm init -y
-open web page: https://expressjs.com/
-type command: npm i express 
-open link: https://www.npmjs.com/package/nodemon
-type command: npm i -D nodemon
-in package.json file add commands start:dev and start
-add type module
-create .gitignore file
-create folder src and index.mjs file
-in index.mjs file import function express from package express
-create variables const app and const PORT
-invoke function app.listen()
-type command npm run start:dev
-open route: http://localhost:3000/ in browser


Get Requests

-in index.mjs file invoke function app.get()
-open route: http://localhost:3000/ in browser
-invoke function app.get() for users
-open route: http://localhost:3000/api/users in browser
-invoke function app.get() for products
-open route: http://localhost:3000/api/products in browser


Route params

-in index.mjs file invoke function app.get() for :id
-create variables const mockUsers and mockProducts
-open route: http://localhost:3000/api/users/:id
-open route: http://localhost:3000/api/users/string
-create variable const parsedId
-add condition if (isNaN(parsedId))
-create variable const findUser
-add condition if (!findUser)
-invoke function return res.send(findUser)
-open route: http://localhost:3000/api/users/:id


Query params

-open route: http://localhost:3000/api/users
-in index.mjs file, in get method for users destructure variable query from req
-add condition if (!filter && !value)
-add condition if (filter && value)
-invoke function return res.send(mockUsers)
-open route: http://localhost:3000/api/users?filter=username
-open route: http://localhost:3000/api/users?filter=username&value=ja


Post Requests

-open Postman and create route for POST method for users
-in index.mjs file invoke function app.post() for users
-open route: http://localhost:3000/api/users and send POST request with body
-invoke function app.use(express.json())
-destructure variable const { body } from req
-create variable const newUser
-invoke function mockUsers.push(newUser)
-invoke function return res.status(201).send(newUser)


Put Requests

-in index.mjs invoke function app.put() for user by id
-destructure variables const { body, params: { id } } from req
-create variable const parsedId
-add condition if (isNaN(parsedId))
-create variable const findUserIndex
-add condition if (findUserIndex === -1)
-update user mockUsers[findUserIndex]
-invoke function return res.sendStatus(200)
-open route: http://localhost:3000/api/users/:id and send PUT request with body


Patch Requests

-in index.mjs file invoke function app.patch()
-open route: http://localhost:3000/api/users/:id and send PATCH request with body


Delete Requests

-in index.mjs file invoke function app.delete()
-open route: http://localhost:3000/api/users/:id and send DELETE request


Middleware

-in index.mjs file create function loggingMiddleware()
-invoke function app.use(loggingMiddleware)
-open route: http://localhost:3000
-add to function app.get('/') parameter loggingMiddleware
-invoke function app.use() before function app.get() for all users
-open route: http://localhost:3000/api/users
-create function resolveIndexByUserId() with three parameters
-add to function app.put() parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send PUT request with body
-add to function app.patch() parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send PATCH request with body
-add to function app.delete() parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send DELETE request
-add to function app.get() for user id parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send GET request


Validation

-open link: https://express-validator.github.io/docs
-open link: https://www.npmjs.com/package/express-validator
-type command: npm i express-validator
-in index.mjs file import functions from package express-validator
-in route app.get() for users, add function query as parameter
-create variable const result
-open route: http://localhost:3000/api/users/ and send GET request with query
-in function app.post() for creating user add function body as parameter
-create variable const result
-add condition if (!result.isEmpty())
-create variable const data
-open route: http://localhost:3000/api/users/ and send POST request with and without body
-create folder utils and validationSchema.mjs file
-in validationSchema.mjs file create and export variable const createUserValidationSchema 
-in index.mjs file import variable createUserValidationSchema from utils/validationSchema.mjs file
-in function app.post() for users add function checkSchema as parameter


Routers

-create folder routes and user.mjs file
-in users.mjs file import function Router from package express
-import functions query, validationResult, checkSchema and matchedData from package express-validator
-create variable const router 
-invoke function router.get()
-export variable router as default
-in index.mjs file import variable router as usersRouter from routes/user.mjs file
-invoke function app.use(usersRouter)
-create constants.mjs file
-move arrays mockUsers and mockProducts to constants.mjs file
-in index.mjs file import arrays from constants.mjs file
-in users.mjs file import arrays from constants.mjs file
-open route: http://localhost:3000/api/users/ and send GET request
-in users.mjs file invoke function router.post()
-open route: http://localhost:3000/api/users/ and send POST request with body
-create middlewares.js file
-in middlewares.js file move function resolveIndexByUserId() from index.mjs file
-in index.mjs file and users.mjs file import function resolveIndexByUserId from middlewares.js file
-in users.mjs file invoke function router.get() for users by id
-open route: http://localhost:3000/api/users/id and send GET request
-in users.mjs file invoke functions router.put(), router.patch() and router.delete()
-in folder routes create products.js file
-in products.js file create and export variable const router as default
-in folder routes create index.mjs file
-in routes/index.mjs file import function Router from package express
-import variables usersRouter and productsRouter
-create and export variable router as default
-invoke two functions router.use()
-in index.mjs file import variable routes from routes/index.mjs file
-invoke function app.use(routes)


Cookies

-in index.mjs file, in function app.get() for home route invoke function res.cookie()
-open route: http://localhost:3000/ and send GET request
-open link: https://www.npmjs.com/package/cookie-parser
-type command: npm i cookie-parser
-in index.mjs file import function cookieParser from package cookie-parser
-invoke function app.use(cookieParser())
-in products.mjs file, in route router.get() add condition if
-open route: http://localhost:3000/api/products and send GET request


Sessions

-open link: https://www.npmjs.com/package/express-session
-type command: npm i express-session
-in index.mjs file import function session from package express-session
-invoke function app.use(session())
-open route: http://localhost:3000 and send GET request
-open route: http://localhost:3000/api/users and send GET request
-in users.mjs file, in function router.get() for all users invoke function req.sessionStore.get()
-open route: http://localhost:3000 and send GET request
-open route: http://localhost:3000/api/users and send GET request


Sessions part 2

-in index.mjs file invoke function app.post() for route api/auth
-open route: http://localhost:3000/api/auth and send POST request with body
-invoke function app.get() for route api/auth/status
-open route: http://localhost:3000/api/auth/status and send GET request
-invoke function app.post() for route api/cart
-open route: http://localhost:3000/api/cart and send POST request with body
-invoke function app.get() for route api/cart
-open route: http://localhost:3000/api/cart and send GET request


Passport.js & Authentication

-open web page: https://www.passportjs.org/
-open link: https://www.npmjs.com/package/passport
-type command: npm i passport
-open link: https://www.npmjs.com/package/passport-local
-type command: npm i passport-local
-in index.mjs file invoke functions app.use(passport.initialize()) and app.use(passport.session())
-in folder src create folder strategies and local-strategy.mjs file
-in local-strategy.mjs file import object passport, function Strategy and array mockUsers
-invoke and export function passport.use() as default
-in index.mjs file add import for local-strategy.mjs file
-open route: http://localhost:3000/api/auth and send POST request with body
-in local-strategy.mjs file invoke function passport.serializeUser()
-invoke function passport.deserializeUser()
-open route: http://localhost:3000/api/auth and send POST request with body
-invoke function app.get() for route api/auth/status
-open route: http://localhost:3000/api/auth/status and send GET request
-invoke function app.post() for route api/auth/logout
-open route: http://localhost:3000/api/auth/logout and send POST request with body


Database & MongoDB

-open link: https://www.npmjs.com/package/mongoose
-type command: npm i mongoose
-in index.mjs file import object mongoose from package mongoose
-invoke function mongoose.connect()
-in folder src create folders mongoose, schemas and user.mjs file
-in schemas/user.mjs file create import object mongoose from package mongoose
-create variable const UserSchema
-create and export variable const User
-in users.mjs file import model User from user.mjs file
-in function router.post() destructure variable const { body } from req
-create variable const newUser
-add to function (req, res) keyword async
-add blocks try - catch
-in block try create variable const savedUser
-open route: http://localhost:3000/api/users and send POST request with body
-open MongoDB to see created user
-create variable const result
-add condition if (!result.isEmpty())
-create variable const data
-in local-strategy.mjs file import variable User from user.mjs file
-in functions deserializeUser() and passport.use() add logic for User model


Hashing Passwords

-open link: https://www.npmjs.com/package/bcrypt
-type command: npm i bcrypt
-in folder utils create helpers.mjs file
-in helpers.mjs file import object bcrypt from package bcrypt
-create variable const saltRounds
-create and export function hashPassword()
-in users.mjs file import function hashPassword() from helpers.mjs file
-in helpers.mjs file create and export function comparePassword()
-in local-strategy.mjs file import function comparePassword from helpers.mjs file
-open route: http://localhost:3000/api/users and send POST request with body
-open route: http://localhost:3000/api/auth and send POST request with body
-in function passport.use() add condition if (!comparePassword(password, findUser.password))


Session Store 

-open link: https://www.npmjs.com/package/connect-mongo
-type command: npm i connect-mongo
-in index.mjs file import function MongoStore from package connect-mongo
-in function session() add value store
-open route: http://localhost:3000/api/auth and send POST request with body
-open route: http://localhost:3000/api/auth/status and send GET request


OAuth2 

-open link: https://www.npmjs.com/package/dotenv
-type command: npm i dotenv
-in index.mjs file import package dotenv
-open link: https://discord.com/developers/applications
-create new application
-open link: https://www.npmjs.com/package/passport-discord
-type command: npm i passport-discord
-create .env file and add three env variables
-create discord-strategy.mjs file
-in discord-strategy.mjs file import function Strategy from package passport-discord
-import object passport from package passport
-invoke and export function passport.use() as default
-in index.mjs file import discord-strategy.mjs file
-invoke function app.get() for route api/auth/discord
-open route: http://localhost:3000/api/auth/discord and send GET request
-invoke function app.get() for route api/auth/discord/redirect
-open route: http://localhost:3000/api/auth/discord/redirect and send GET request
-in folder schemas.mjs create discord-user.mjs file
-in discord-user.mjs file create variable const DiscordUserSchema
-create and export variable export const DiscordUser
-in discord-strategy.mjs file import variable DiscordUser from discord-user.mjs file
-add to function Strategy two arguments
-first argument is object with env variables
-second object is anonymous async function with four parameters
-in async function create variable const findUser
-add condition if (!findUser)
-in condition if (!findUser) create variable const newUser
-after condition if (!findUser) create variable const newSavedUser
-invoke function done()
-in anonymous function create variable let findUser
-add two blocks try - catch
-in discord-strategy.mjs file invoke functions passport.serializeUser() and passport.deserializeUser()
-open route: http://localhost:3000/api/auth/status and send GET request


Unit Testing & Jest

-open link: https://www.npmjs.com/package/@babel/core
-open link: https://www.npmjs.com/package/@babel/node
-open link: https://www.npmjs.com/package/@babel/preset-env
-open web page: https://jestjs.io
-open link: https://www.npmjs.com/package/babel-jest
-type command: npm i -D @babel/core @babel/node @babel/preset-env jest
-create .babelrc file
-in .babelrc file add object presets
-type command: npm init jest@latest to create jest.config.js file
-in jest.config.mjs file add object transform
-add array moduleFileExtensions
-in package.json file add command test for package jest
-in folder src create folder __tests__ and users.spec.js file
-create jsconfig.json file
-in jsconfig.json file create object typeAcquisitions
-open link: https://www.npmjs.com/package/@types/jest
-type command: npm i @types/jest
-in users.spec.js file invoke function describe() with two arguments
-first argument is test description and second argument is anonymous function
-test description is get users
-in anonymous function invoke function it() with two arguments
-in function it() first argument is test description and second argument is anonymous function
-test description - should get user by id
-create folder handlers 
-in folder handlers create users.mjs file
-in handlers/users.mjs file create and export function getUserById
-in routes/users.mjs file import function getUserById from handlers/users.mjs file
-in function router.get() for route api/users/:id add function getUserByIdHandler
-in users.spec.js file import function getUserByIdHandler from handlers/users.mjs file
-create variables const mockRequest and mockResponse
-in anonymous function invoke function getUserByIdHandler() with two arguments
-type command: npm run test
-invoke function expect(mockResponse.send).toHaveBeenCalledWith()
-import array mockUsers from constants.mjs file
-invoke function expect(mockResponse.send).toHaveBeenCalledWith(mockUsers[0])
-invoke function expect(mockResponse.send).toHaveBeenCalledWith({ ... })
-invoke function expect(mockResponse.send).toHaveBeenCalledTimes(1)
-invoke function it () with two arguments
-in function it() first argument is test description and second argument is anonymous function
-test description should call sendStatus with 404 when user not found
-in anonymous function create variable const copyMockRequest
-invoke function getUserByIdHandler()
-invoke function expect(mockResponse.sendStatus).toHaveBeenCalled()
-invoke function expect(mockResponse.sendStatus).toHaveBeenCalledWith(404)
-invoke function expect(mockResponse.sendStatus).toHaveBeenCalledTimes(1)
-in handlers/users.mjs file create and export async function  createUserHandler()
-in router/users.mjs file import function createUserHandler from handlers/users.mjs file
-add to function router.post() function createUserHandler
-invoke function describe() with two arguments
-first argument is test description and second argument is anonymous function
-test description - create user
-in anonymous function invoke function it() with two arguments
-first argument is test description and second argument is anonymous function
-test description - should return status of 400 when there are errors
-invoke three functions jest.mock()
-in users.spec.js file import function createUserHandler from handlers/users.mjs file
-create variable empty object const mockRequest = {}
-in function it() invoke function await createUserHandler(mockRequest, mockResponse) 
-import * as validator from 'express-validator'
-invoke function expect(validator.validationResult).toHaveBeenCalled()
-invoke fun expect(validator.validationResult).toHaveBeenCalledWith(mockRequest)
-invoke function expect(mockResponse.status).toHaveBeenCalledWith(400)
-invoke function expect(mockResponse.send).toHaveBeenCalledWith([{ ... }])
-invoke function it with two arguments
-first argument is test description and second argument is anonymous function
-test description - should return status of 201 and the user created
-in anonymous function invoke function jest.spyOn()
-invoke function await createUserHandler()
-invoke function expect(validator.matchedData).toHaveBeenCalled()
-add import * as helpers from "../utils/helpers.mjs";
-invoke function expect(validator.matchedData).toHaveBeenCalledWith(mockRequest)
-invoke function expect(helpers.hashPassword).toHaveBeenCalledWith('password')
-invoke function expect(helpers.hashPassword).toHaveReturnedWith('hashed_password')
-import variable User from schemas/user.mjs file
-invoke function expect(User).toHaveBeenCalled()
-invoke function expect(User).toHaveBeenCalledWith({ ... })
-invoke function expect(User.mock.instances[0].save).toHaveBeenCalled()
-create variable const saveMethod 
-invoke function expect(saveMethod).toHaveBeenCalled()
-invoke function expect(mockResponse.status).toHaveBeenCalledWith(201)
-invoke function expect(mockResponse.send).toHaveBeenCalledWith({ ... })
-invoke function it() with two arguments
-first argument is test description and second argument is anonymous function
-test description send status of 400 when database fails to save user
-in anonymous function invoke function jest.spyOn()
-create variable const saveMethod
-invoke function await createUserHandler()
-invoke function await createUserHandler()
-invoke function expect(saveMethod).toHaveBeenCalled()
-invoke function expect(mockResponse.sendStatus).toHaveBeenCalledWith(400)