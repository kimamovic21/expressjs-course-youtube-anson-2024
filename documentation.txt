Express JS Full Course


Intro & Setup

-open terminal and type command npm init -y
-open web page: https://expressjs.com/
-type command: npm i express 
-open link: https://www.npmjs.com/package/nodemon
-type command: npm i -D nodemon
-in package.json file add commands start:dev and start
-add type module
-create .gitignore file
-create folder src and index.mjs file
-in index.mjs file import function express from package express
-create variables const app and const PORT
-invoke function app.listen()
-type command npm run start:dev
-open route: http://localhost:3000/ in browser


Get Requests

-in index.mjs file invoke function app.get()
-open route: http://localhost:3000/ in browser
-invoke function app.get() for users
-open route: http://localhost:3000/api/users in browser
-invoke function app.get() for products
-open route: http://localhost:3000/api/products in browser


Route params

-in index.mjs file invoke function app.get() for :id
-create variables const mockUsers and mockProducts
-open route: http://localhost:3000/api/users/:id
-open route: http://localhost:3000/api/users/string
-create variable const parsedId
-add condition if (isNaN(parsedId))
-create variable const findUser
-add condition if (!findUser)
-invoke function return res.send(findUser)
-open route: http://localhost:3000/api/users/:id


Query params

-open route: http://localhost:3000/api/users
-in index.mjs file, in get method for users destructure variable query from req
-add condition if (!filter && !value)
-add condition if (filter && value)
-invoke function return res.send(mockUsers)
-open route: http://localhost:3000/api/users?filter=username
-open route: http://localhost:3000/api/users?filter=username&value=ja


Post Requests

-open Postman and create route for POST method for users
-in index.mjs file invoke function app.post() for users
-open route: http://localhost:3000/api/users and send POST request with body
-invoke function app.use(express.json())
-destructure variable const { body } from req
-create variable const newUser
-invoke function mockUsers.push(newUser)
-invoke function return res.status(201).send(newUser)


Put Requests

-in index.mjs invoke function app.put() for user by id
-destructure variables const { body, params: { id } } from req
-create variable const parsedId
-add condition if (isNaN(parsedId))
-create variable const findUserIndex
-add condition if (findUserIndex === -1)
-update user mockUsers[findUserIndex]
-invoke function return res.sendStatus(200)
-open route: http://localhost:3000/api/users/:id and send PUT request with body


Patch Requests

-in index.mjs file invoke function app.patch()
-open route: http://localhost:3000/api/users/:id and send PATCH request with body


Delete Requests

-in index.mjs file invoke function app.delete()
-open route: http://localhost:3000/api/users/:id and send DELETE request


Middleware

-in index.mjs file create function loggingMiddleware()
-invoke function app.use(loggingMiddleware)
-open route: http://localhost:3000
-add to function app.get('/') parameter loggingMiddleware
-invoke function app.use() before function app.get() for all users
-open route: http://localhost:3000/api/users
-create function resolveIndexByUserId() with three parameters
-add to function app.put() parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send PUT request with body
-add to function app.patch() parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send PATCH request with body
-add to function app.delete() parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send DELETE request
-add to function app.get() for user id parameter function resolveIndexByUserId
-open route: http://localhost:3000/api/users/:id and send GET request


Validation

-open link: https://express-validator.github.io/docs
-open link: https://www.npmjs.com/package/express-validator
-type command: npm i express-validator
-in index.mjs file import functions from package express-validator
-in route app.get() for users, add function query as parameter
-create variable const result
-open route: http://localhost:3000/api/users/ and send GET request with query
-in function app.post() for creating user add function body as parameter
-create variable const result
-add condition if (!result.isEmpty())
-create variable const data
-open route: http://localhost:3000/api/users/ and send POST request with and without body
-create folder utils and validationSchema.mjs file
-in validationSchema.mjs file create and export variable const createUserValidationSchema 
-in index.mjs file import variable createUserValidationSchema from utils/validationSchema.mjs file
-in function app.post() for users add function checkSchema as parameter


Routers

-create folder routes and user.mjs file
-in users.mjs file import function Router from package express
-import functions query, validationResult, checkSchema and matchedData from package express-validator
-create variable const router 
-invoke function router.get()
-export variable router as default
-in index.mjs file import variable router as usersRouter from routes/user.mjs file
-invoke function app.use(usersRouter)
-create constants.mjs file
-move arrays mockUsers and mockProducts to constants.mjs file
-in index.mjs file import arrays from constants.mjs file
-in users.mjs file import arrays from constants.mjs file
-open route: http://localhost:3000/api/users/ and send GET request
-in users.mjs file invoke function router.post()
-open route: http://localhost:3000/api/users/ and send POST request with body
-create middlewares.js file
-in middlewares.js file move function resolveIndexByUserId() from index.mjs file
-in index.mjs file and users.mjs file import function resolveIndexByUserId from middlewares.js file
-in users.mjs file invoke function router.get() for users by id
-open route: http://localhost:3000/api/users/id and send GET request
-in users.mjs file invoke functions router.put(), router.patch() and router.delete()
-in folder routes create products.js file
-in products.js file create and export variable const router as default
-in folder routes create index.mjs file
-in routes/index.mjs file import function Router from package express
-import variables usersRouter and productsRouter
-create and export variable router as default
-invoke two functions router.use()
-in index.mjs file import variable routes from routes/index.mjs file
-invoke function app.use(routes)